import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react";

// Creating an API slice using `createApi`
export const productsAPI = createApi({
	// `reducerPath` is the key in the Redux store where this API reducer will be mounted
	reducerPath: "products",

	// `baseQuery` is the function that will be used to make requests
	// Here, we are using `fetchBaseQuery` which is a simple wrapper around the Fetch API
	baseQuery: fetchBaseQuery({ baseUrl: "https://dummyjson.com" }),

	// Defining all the endpoints (queries and mutations)
	endpoints: (builder) => ({
		// Endpoint to fetch all products (GET /products)
		getAllProduct: builder.query({
			// `query` defines the path for the request
			query: () => "/products",
		}),

		// Endpoint to fetch a single product by its ID (GET /products/:id)
		getProductById: builder.query({
			// Takes an `id` parameter to build the URL dynamically
			query: (id) => `/products/${id}`,
		}),

		// Endpoint to add a new product (POST /products/add)
		addNewProduct: builder.mutation({
			// Takes `newProduct` as body and returns the request configuration
			query: (newProduct) => ({
				// API endpoint
				url: "/products/add",

				// HTTP method
				method: "POST",

				// Headers to specify the content type
				headers: { "Content-Type": "application/json" },

				// Body of the request
				body: newProduct,
			}),
		}),

		// Endpoint to update an existing product by ID (PUT /products/:id)
		updateProduct: builder.mutation({
			// Takes an object with `id` and `updatedProduct` to build request
			query: ({ id, updatedProduct }) => ({
				// API endpoint with dynamic ID
				url: `products/${id}`,

				// HTTP method
				method: "PUT",

				// Headers to specify the content type
				headers: { "Content-Type": "application/json" },

				// Body of the request containing the updated product data
				body: updatedProduct,
			}),
		}),

		// Endpoint to delete a product by ID (DELETE /products/:id)
		deleteProduct: builder.mutation({
			// Takes an `id` to identify the product to delete
			query: (id) => ({
				// API endpoint with dynamic ID
				url: `products/${id}`,

				// HTTP method
				method: "DELETE",
			}),
		}),
	}),
});

// Exporting hooks generated by `createApi` for each endpoint
export const {
	useGetAllProductQuery,
	useGetProductByIdQuery,
	useAddNewProductMutation,
	useUpdateProductMutation,
	useDeleteProductMutation,
} = productsAPI;
